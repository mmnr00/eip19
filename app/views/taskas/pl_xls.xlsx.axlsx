wb = xlsx_package.workbook
col_widths= [50,10,10,20,20]
wb.styles do |style|
  header_1 = style.add_style(b: true, sz: 30)
  highlight_cell = style.add_style(bg_color: "EFC376",
                                  b: true,
                                  border: Axlsx::STYLE_THIN_BORDER,
                                  sz: 15,
                                  alignment: { horizontal: :center })
  total_cell = style.add_style(bg_color: "b2b2ff",
                                  border: Axlsx::STYLE_THIN_BORDER,
                                  b: true,
                                  sz: 20,
                                  alignment: { horizontal: :center })
  nett_cell = style.add_style(bg_color: "99cc99",
                                  border: Axlsx::STYLE_THIN_BORDER,
                                  b: true,
                                  sz: 22,
                                  alignment: { horizontal: :center })
  bill_cell = style.add_style(bg_color: "d8b2d8",
                                  border: Axlsx::STYLE_THIN_BORDER,
                                  b: true)

  border_cell = style.add_style(border: Axlsx::STYLE_THIN_BORDER,
                                sz: 13)       
  wb.add_worksheet(name: "ACCOUNTING SUMMARY") do |sheet|

    sheet.add_row ["ACCOUNTING SUMMARY FOR #{@taska.name.upcase}"]
    sheet.add_row [""]
    sheet.add_row ["ITEM",
                  "MONTH",
                  "YEAR",
                  "INCOME",
                  "EXPENSE"]
    sheet.rows[0].style = header_1
    sheet.rows[2].style = highlight_cell
    counter = 1
    row =2
    income = 0
    expense = 0
    
      (1..12).each do |m|
        if (bill_month = @taska_bills.where(bill_month: m)).present?
          sheet.add_row ["#{bill_month.where(paid: true).count} OUT OF #{bill_month.count} BILLS PAID",
                      bill_month.first.bill_month,
                      bill_month.first.bill_year,
                      bill_month.where(paid: true).sum(:amount),
                      ""], style: [nil, border_cell]
          sheet.rows[row+counter].style = bill_cell           
          counter = counter +1
        end
        if (psl = @payslips.where(mth: m)).present?
          dt = Date.new(psl.first.year, psl.first.mth)
          dt = dt-1.months
          psltot = psl.sum(:amtepfa)
          sheet.add_row ["#{psl.count} PAYSLIPS ISSUED",
                      dt.month,
                      dt.year,
                      "",
                      psltot], style: [nil, border_cell]
          sheet.rows[row+counter].style = bill_cell           
          counter = counter +1
          expense = expense + psltot
        end
        if (pln = @taska_plan.where('extract(month from updated_at) = ?', m)).present?
          plntot = pln.sum(:amount)
          sheet.add_row ["KIDCARE'S BILL",
                      pln.first.created_at.month,
                      pln.first.created_at.year,
                      "",
                      plntot], style: [nil, border_cell]
          sheet.rows[row+counter].style = bill_cell           
          counter = counter +1
          expense = expense + plntot
        end 
      end
    

    income = income + @taska_bills.where(paid: true).sum(:amount) 
    @taska_expenses.each do |exp|
      if exp.kind == "INCOME"
        sheet.add_row [exp.name,
                      exp.month,
                      exp.year,
                      exp.cost,
                      ""],
                      style: [nil, border_cell] 
                      
        sheet.rows[row+counter].style = border_cell
        counter = counter +1
        income = income + exp.cost
      elsif exp.kind == "EXPENSE"
        sheet.add_row [exp.name,
                    exp.month,
                    exp.year,
                    "",
                    exp.cost]
                    
      sheet.rows[row+counter].style = border_cell
      counter = counter +1
      expense = expense + exp.cost
      end
    end
    
    sheet.add_row ["TOTAL","","",income,expense]
    sheet.rows[counter+row].style = total_cell
    counter = counter + 1
    sheet.merge_cells sheet.rows.last.cells[(0..2)]
    sheet.add_row ["NETT INCOME","","",income-expense,""]
    sheet.rows[counter+row].style = nett_cell
    sheet.merge_cells sheet.rows.last.cells[(0..2)]
    sheet.merge_cells sheet.rows.last.cells[(3..4)]
    sheet.column_widths *col_widths

    
    sheet.add_chart(Axlsx::Pie3DChart, :start_at => "G3", :end_at => "P14", :title => "BILLING SUMMARY FOR #{$month_name[params[:month].to_i]} #{params[:year]}") do |chart|
      chart.add_series :data => 
                            [@taska_bills.where(paid: true).sum(:amount), 
                            @taska_bills.where(paid: false).sum(:amount)], :labels => ["PAID","UNPAID"],  :colors => ["66b266","ff6666"]
      chart.d_lbls.show_val = true
      chart.d_lbls.show_percent = true
    end

    sheet.add_chart(Axlsx::Bar3DChart, :start_at => "G16", :end_at => "P28", :title => "ACCOUNTING SUMMARY FOR #{$month_name[params[:month].to_i]} #{params[:year]}") do |chart|
      chart.add_series :data => 
                            [expense,
                            income], :labels => ["EXPENSE","INCOME"],  :colors => [ 'FF0000','00FF00']
    end
    
    
    
  end
end















